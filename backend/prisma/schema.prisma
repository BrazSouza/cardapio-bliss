// Configuração do Prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelos de dados

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
  addresses Address[]
  favorites Product[] @relation("UserFavorites") // Para funcionalidade de favoritos

}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  products    Product[]
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  price       Float
  imageUrl    String?
  available   Boolean     @default(true)
  categoryId  Int
  category    Category    @relation(fields: [categoryId], references: [id])
  orderItems  OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  favoritedBy User[] @relation("UserFavorites")

}

model Order {
  id        Int         @id @default(autoincrement())
  userId    Int
  user      User        @relation(fields: [userId], references: [id])
  status    String      @default("pending") // pending, processing, completed, cancelled
  total     Float
  items     OrderItem[]
  notes         String?   // Observações gerais do pedido
  scheduledFor  DateTime? // Para agendamento de pedidos
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  addressId Int?
  address   Address? @relation(fields: [addressId], references: [id])
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  order     Order   @relation(fields: [orderId], references: [id])
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float   // Preço no momento da compra
  notes     String? // Observações específicas do item (ex: sem cebola)
}


model Address {
  id           Int      @id @default(autoincrement())
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  street       String
  number       String
  complement   String?
  neighborhood String
  city         String
  state        String
  zipcode      String
  isDefault    Boolean  @default(false)
  orders       Order[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}