import React, { useEffect, useState } from 'react';
import PropTypes from 'prop-types'; // Importe o PropTypes para definir os tipos das props

/*
 * Componente Toast para exibir notificações
 * @param {string} message - Mensagem a ser exibida
 * @param {string} type - Tipo de toast: 'success', 'error', 'warning', 'info'
 * @param {function} onClose - Função chamada quando o toast é fechado (opcional)
 * @param {boolean} visible - Controla a visibilidade do toast externamente (opcional)
 * @param {number} duration - Duração em milissegundos antes de o toast desaparecer automaticamente (opcional)
 */
function Toast({ message, type = 'success', onClose, visible, duration = 3000 }) {
  const [isVisibleInterno, setIsVisibleInterno] = useState(false);
  const isVisible = visible !== undefined ? visible : isVisibleInterno;

  useEffect(() => {
    if (visible) {
      setIsVisibleInterno(true);
    }
  }, [visible]);

  useEffect(() => {
    if (isVisible && duration > 0) {
      const timer = setTimeout(() => {
        setIsVisibleInterno(false);
        if (onClose) {
          setTimeout(onClose, 300); // Delay para a animação de saída
        }
      }, duration);

      return () => clearTimeout(timer);
    }
  }, [isVisible, duration, onClose]);

  const getToastConfig = () => {
    switch (type) {
      case 'success':
        return {
          bgColor: 'bg-green-500',
          icon: 'check_circle',
          iconColor: 'text-white'
        };
      case 'error':
        return {
          bgColor: 'bg-red-500',
          icon: 'error',
          iconColor: 'text-white'
        };
      case 'warning':
        return {
          bgColor: 'bg-yellow-500',
          icon: 'warning',
          iconColor: 'text-white'
        };
      case 'info':
        return {
          bgColor: 'bg-blue-500',
          icon: 'info',
          iconColor: 'text-white'
        };
      default:
        return {
          bgColor: 'bg-gray-700',
          icon: 'notifications',
          iconColor: 'text-white'
        };
    }
  };

  const { bgColor, icon, iconColor } = getToastConfig();

  const handleClose = () => {
    setIsVisibleInterno(false);
    setTimeout(() => {
      if (onClose) onClose();
    }, 300);
  };

  return (
    <div
      className={`
        ${bgColor} text-white p-3 rounded-md shadow-lg flex items-center
        transition-all duration-300 max-w-md min-w-[300px]
        ${isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-[-20px]'}
      `}
      role="alert"
      style={{
        visibility: isVisible ? 'visible' : 'hidden', // Garante que o layout não seja afetado quando invisível
      }}
    >
      <span className={`material-icons ${iconColor} mr-2`}>{icon}</span>
      <div className="flex-1 mr-2">{message}</div>
      <button
        onClick={handleClose}
        className="text-white hover:text-gray-200 focus:outline-none"
        aria-label="Fechar"
      >
        <span className="material-icons text-sm">close</span>
      </button>
    </div>
  );
}

Toast.propTypes = {
  message: PropTypes.string.isRequired,
  type: PropTypes.oneOf(['success', 'error', 'warning', 'info']),
  onClose: PropTypes.func,
  visible: PropTypes.bool,
  duration: PropTypes.number,
};

export default Toast;